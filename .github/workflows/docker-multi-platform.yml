name: Multi-Platform Docker Build

on:
  push:
    branches: [ "main" ]
    paths:
      - "docker/**"
      - "dist/**"
      - "index.html"
    tags: ["v*", "[0-9]+.[0-9]+.[0-9]+", "[0-9]+.[0-9]+.[0-9]+-*"]
  workflow_dispatch:
  schedule:
    - cron: "30 0 * * *"

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_CONTAINER: "mind-map"
  GOTIFY_SERVER: ${{ secrets.GOTIFY_SERVER }} 
  GOTIFY_TOKEN: ${{ secrets.GOTIFY_TOKEN }} 
  UPSTREAM_REPO: "wanglin2/mind-map"
  DOCKER_CLI_EXPERIMENTAL: "enabled"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-upstream:
    runs-on: ubuntu-22.04
    outputs:
      has_updates: ${{ steps.compare.outputs.has_updates }}
      latest_upstream_tag: ${{ steps.get-upstream-tag.outputs.latest_tag }} 
      file_changed: ${{ steps.monitor-result.outputs.file_changed }}
    steps:
      - name: Checkout Fork Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git fetch upstream
          git fetch upstream --tags
          
      - name: Compare commits
        id: compare
        run: |
          UPSTREAM_COMMIT=$(git rev-parse upstream/main)
          FORK_COMMIT=$(git rev-parse origin/main)
          echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
          echo "fork_commit=$FORK_COMMIT" >> $GITHUB_OUTPUT

          if git merge-base --is-ancestor upstream/main origin/main; then
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "This branch is not behind the upstream"
          else
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "This branch is behind the upstream"
          fi

      - name: Get latest upstream tag
        id: get-upstream-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 upstream/main 2>/dev/null || echo "none")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
          echo "Latest tag: ${LATEST_TAG}"

      - name: Sync updates
        if: steps.compare.outputs.has_updates == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"    
          cp README.md README_CUSTOM.md
          echo "README.md merge=ours" > .gitattributes
          git add .gitattributes
          git commit -m "Set merge strategy for README.md" || true
          if ! git merge --no-ff -Xtheirs upstream/main -m "Merge upstream/main (ignore README.md changes)"; then
            echo "合并冲突发生，解决冲突并保留README.md"
            mv README_CUSTOM.md README.md
            git add README.md
            git checkout --theirs -- .
            git add .
            git commit -m "解决合并冲突并保留自定义README.md"
          fi
          if [ -f README_CUSTOM.md ]; then
            mv README_CUSTOM.md README.md
            git add README.md
            if ! git diff-index --quiet HEAD --; then
              git commit -m "Restore custom README.md"
            fi
          fi
          git push origin main

      - name: Set File Monitor
        uses: dorny/paths-filter@v3
        id: file-monitor
        with:
          filters: |
            docker: 
              - 'docker/**'
            static:
              - 'dist/**'
              - 'index.html'
          
      - name: File Monitor Result
        id: monitor-result
        run: |
          if [[ "${{ steps.file-monitor.outputs.docker }}" == "true" || "${{ steps.file-monitor.outputs.static }}" == "true" ]]; then
            echo "file_changed=true" >> $GITHUB_OUTPUT
          else
            echo "file_changed=false" >> $GITHUB_OUTPUT
          fi
          echo "Files monitor status: docker[${{ steps.file-monitor.outputs.docker }}], Static[${{ steps.file-monitor.outputs.static }}]"
          

  docker-build-push:
    needs: check-upstream
    if: needs.check-upstream.outputs.has_updates == 'true' || needs.check-upstream.outputs.file_changed == 'true' || github.event_name == 'workflow_dispatch' || contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Debug output
        run: |
          echo "has_updates: ${{ needs.check-upstream.outputs.has_updates == 'true' }} \
                file_changed: ${{ needs.check-upstream.outputs.file_changed }} \
          "
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_TOKEN }}

      - name: Generate Docker tags
        id: generate_tags
        run: |
          TAGS=$(./.github/scripts/build_utils.sh generate_tags \
            "${{ env.DOCKER_USERNAME }}" \
            "${{ env.DOCKER_CONTAINER }}" \
            "${{ needs.check-upstream.outputs.latest_upstream_tag || 'none' }}" \
            "${{ github.sha }}")
          echo "TAGS=${TAGS}" >> $GITHUB_ENV
          echo "Generate tags: ${TAGS}"

      - name: Build and Push (Multi-Arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/multi-platform/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ env.TAGS }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Send build notification
        run: |
          STATUS=${{ job.status }}
          ./.github/scripts/build_utils.sh send_notification \
            "${{ env.GOTIFY_SERVER }}" "${{ env.GOTIFY_TOKEN }}" "${{ env.DOCKER_CONTAINER }}" \
            "$STATUS" "${{ github.event_name }}" \
            "${{ env.TAGS }}" \
            "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
